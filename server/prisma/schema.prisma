// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  CANDIDATE
  EMPLOYER
  BRANCH_ADMIN
  SUPER_ADMIN
}

enum AdStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  CLOSED
  REJECTED
}

enum AllocationStatus {
  APPLIED
  SHORTLISTED
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  HIRED
  HOLD
  REJECTED
}

enum FeeType {
  FIXED
  PERCENTAGE
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum ExperienceLevel {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
  EXECUTIVE
}

enum CurrentEmploymentStatus {
  LOOKING_FOR_JOB
  OPEN_TO_OPPORTUNITIES
  CURRENTLY_WORKING
  STUDENT_RECENT_GRADUATE
}

enum ShiftPreference {
  DAY_SHIFT
  NIGHT_SHIFT
  FLEXIBLE_HOURS
  WEEKEND_ONLY
}

enum Availability {
  IMMEDIATELY
  WITHIN_1_WEEK
  WITHIN_1_MONTH
  AFTER_2_MONTHS
}

enum Language {
  ENGLISH
  HINDI
  TELUGU
  TAMIL
  KANNADA
  MALAYALAM
  BENGALI
  MARATHI
  GUJARATI
  PUNJABI
  URDU
  ODIA
}

// Core User Model
model User {
  id             String   @id @default(uuid())
  name           String
  firstName      String?  @map("first_name")
  lastName       String?  @map("last_name")
  email          String?
  phone          String   @unique
  passwordHash   String   @map("password_hash")
  role           UserRole
  cityId         String?  @map("city_id")
  isActive       Boolean  @default(true) @map("is_active")
  isVerified     Boolean  @default(false) @map("is_verified")
  otp            String?
  otpExpiresAt   DateTime? @map("otp_expires_at")
  deviceToken    String?  @map("device_token") // For push notifications
  devicePlatform String?  @map("device_platform") // ios, android, web
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  city      City?        @relation("CityToUser", fields: [cityId], references: [id])
  candidate Candidate?
  employer  Employer?
  branchAdmin BranchAdmin?
  notifications Notification[]
  notificationPreferences UserNotificationPreference?
  dailyNotificationTrackers DailyNotificationTracker[]
  jobViews JobView[]

  @@map("users")
}

// City Management
model City {
  id        String   @id @default(uuid())
  name      String
  state     String
  country   String   @default("India")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  users        User[] @relation("CityToUser")
  ads          Ad[]
  companies    Company[]
  branchAdmins BranchAdmin[]

  @@unique([name, state])
  @@map("cities")
}

// Candidate Profile
model Candidate {
  id             String   @id @default(uuid())
  userId         String   @unique @map("user_id")
  profileData    Json?    @map("profile_data") // Education, experience, skills, portfolio
  resumeUrl      String?  @map("resume_url")
  education      Json?    // Array of education entries
  experience     Json?    // Array of experience entries
  portfolio      Json?    // Portfolio links and details
  tags           String[] // Searchable tags from Branch Admin
  ratings        Json?    // {skillName: rating} permanent ratings
  overallRating  Decimal? @map("overall_rating") @db.Decimal(3, 2)
  ratingHistory  Json?    @map("rating_history") // Historical ratings
  profilePhoto   String?  @map("profile_photo")
  coverPhoto     String?  @map("cover_photo")
  dateOfBirth    DateTime? @map("date_of_birth")

  // Onboarding specific fields
  onboardingCompleted Boolean @default(false) @map("onboarding_completed")
  onboardingStep     Int?    @default(0) @map("onboarding_step") // Current step in onboarding

  // Basic Info fields
  bio                String? // Professional summary/bio
  linkedinUrl        String? @map("linkedin_url")
  githubUrl          String? @map("github_url")
  websiteUrl         String? @map("website_url")

  // Job Preferences
  preferredJobTitles  String[] @map("preferred_job_titles") // Array of preferred job titles
  preferredIndustries String[] @map("preferred_industries") // Array of preferred industries
  preferredLocations  String[] @map("preferred_locations") // Array of preferred location IDs
  preferredSalaryMin  Decimal? @map("preferred_salary_min") @db.Decimal(10, 2)
  preferredSalaryMax  Decimal? @map("preferred_salary_max") @db.Decimal(10, 2)
  preferredJobTypes   String[] @map("preferred_job_types") // FULL_TIME, PART_TIME, etc.
  remoteWorkPreference String? @map("remote_work_preference") // REMOTE, HYBRID, ONSITE, FLEXIBLE

  // Skills and Experience
  skillsWithExperience Json?  @map("skills_with_experience") // {skillId: experienceLevel}
  currentEmploymentStatus String? @map("current_employment_status") // From enum
  availabilityDate       DateTime? @map("availability_date")
  noticePeriod          String? @map("notice_period") // 0 days, 15 days, 1 month, etc.
  currentSalary         Decimal? @map("current_salary") @db.Decimal(10, 2)

  // Language Preferences
  preferredLanguages    String[] @map("preferred_languages") // From Language enum

  // Work Preferences
  shiftPreference       String? @map("shift_preference") // From ShiftPreference enum
  travelWillingness     Boolean? @map("travel_willingness")

  // Experience and Availability
  experienceLevel       String? @map("experience_level") // From ExperienceLevel enum
  availabilityStatus    String? @map("availability_status") // From Availability enum

  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  allocations     Allocation[]
  bookmarks       Bookmark[]
  employerBookmarks EmployerBookmark[]
  profileViews    ProfileView[]

  @@map("candidates")
}

// Employer Profile
model Employer {
  id             String   @id @default(uuid())
  userId         String   @unique @map("user_id")
  contactDetails Json?    @map("contact_details") // Business contact info
  mouHistory     Json?    @map("mou_history") // History of signed agreements
  isVerified     Boolean  @default(false) @map("is_verified")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  companies     Company[]
  ads           Ad[]
  allocations   Allocation[]
  mous          MOU[]
  bookmarks     EmployerBookmark[]
  subscriptions Subscription[]
  profileViews  ProfileView[]

  @@map("employers")
}

// Company Management
model Company {
  id          String   @id @default(uuid())
  employerId  String   @map("employer_id")
  name        String
  description String?
  cityId      String   @map("city_id")
  logo        String?
  website     String?
  industry    String?
  size        String?  // e.g., "1-10", "11-50", "51-200"
  isActive    Boolean  @default(true) @map("is_active")
  isDefault   Boolean  @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  employer Employer @relation(fields: [employerId], references: [id], onDelete: Cascade)
  city     City     @relation(fields: [cityId], references: [id])
  ads      Ad[]

  @@map("companies")
}

// Universal Ad Posting System
model Ad {
  id                      String   @id @default(uuid())
  employerId              String   @map("employer_id")
  companyId               String   @map("company_id")
  categoryName            String   @map("category_name") // Jobs, Deals, Events, etc.
  categoryId              String?  @map("category_id") // Reference to JobCategory
  title                   String
  description             String
  status                  AdStatus @default(DRAFT)
  locationId              String   @map("location_id")
  gender                  String?  // MALE, FEMALE, BOTH
  educationQualificationId String? @map("education_qualification_id") // Reference to EducationQualification
  skills                  String?  // Required skills for the job
  salaryMin               Decimal? @map("salary_min") @db.Decimal(10, 2) // Minimum salary
  salaryMax               Decimal? @map("salary_max") @db.Decimal(10, 2) // Maximum salary
  experienceLevel         String?  @map("experience_level") // FRESHER, ENTRY_LEVEL, MID_LEVEL, SENIOR_LEVEL, EXECUTIVE
  employmentType          String?  @map("employment_type") // FULL_TIME, PART_TIME, CONTRACT, INTERNSHIP, FREELANCE
  contactInfo             Json?    @map("contact_info")
  validUntil              DateTime? @map("valid_until")
  isActive                Boolean  @default(true) @map("is_active")
  approvedAt              DateTime? @map("approved_at")
  approvedBy              String?  @map("approved_by") // Branch Admin ID
  rejectionReason         String?  @map("rejection_reason") // Reason for rejection
  rejectedAt              DateTime? @map("rejected_at")
  rejectedBy              String?  @map("rejected_by") // Branch Admin ID who rejected
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  // Relations
  employer             Employer              @relation(fields: [employerId], references: [id], onDelete: Cascade)
  company              Company               @relation(fields: [companyId], references: [id])
  location             City                  @relation(fields: [locationId], references: [id])
  category             JobCategory?          @relation(fields: [categoryId], references: [id])
  educationQualification EducationQualification? @relation(fields: [educationQualificationId], references: [id])
  allocations          Allocation[]
  bookmarks            Bookmark[]
  jobViews             JobView[]
  jobViewMilestones    JobViewMilestone[]

  @@map("ads")
}

// Candidate-Job Application & Allocation
model Allocation {
  id           String           @id @default(uuid())
  candidateId  String           @map("candidate_id")
  adId         String           @map("ad_id")
  employerId   String           @map("employer_id")
  status       AllocationStatus @default(APPLIED)
  feeType      FeeType?         @map("fee_type")
  feeValue     Decimal?         @map("fee_value") @db.Decimal(10, 2)
  notes        String?          // Branch Admin notes
  allocatedBy  String?          @map("allocated_by") // Branch Admin ID
  allocatedAt  DateTime?        @map("allocated_at")
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")

  // Relations
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  ad        Ad        @relation(fields: [adId], references: [id], onDelete: Cascade)
  employer  Employer  @relation(fields: [employerId], references: [id])

  @@map("allocations")
}

// MOU Management
model MOU {
  id            String   @id @default(uuid())
  employerId    String   @map("employer_id")
  branchAdminId String   @map("branch_admin_id")
  feeType       FeeType
  feeValue      Decimal  @map("fee_value") @db.Decimal(10, 2)
  terms         String?  // Agreement terms
  notes         String?  // Additional notes
  status        String   @default("PENDING_APPROVAL") // PENDING_APPROVAL, APPROVED, REJECTED
  signedAt      DateTime @map("signed_at")
  fileUrl       String?  @map("file_url")
  version       String   @default("1.0")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  employer     Employer     @relation(fields: [employerId], references: [id], onDelete: Cascade)
  branchAdmin  BranchAdmin  @relation(fields: [branchAdminId], references: [id])

  @@map("mous")
}

// Branch Admin Management
model BranchAdmin {
  id                  String   @id @default(uuid())
  userId              String   @unique @map("user_id")
  assignedCityId      String   @map("assigned_city_id")
  performanceMetrics  Json?    @map("performance_metrics") // Approval rates, screening stats
  isActive            Boolean  @default(true) @map("is_active")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedCity City @relation(fields: [assignedCityId], references: [id])
  mous         MOU[]

  @@map("branch_admins")
}

// Candidate Bookmarks (Candidates bookmarking jobs)
model Bookmark {
  id          String   @id @default(uuid())
  candidateId String   @map("candidate_id")
  adId        String   @map("ad_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  ad        Ad        @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@unique([candidateId, adId])
  @@map("bookmarks")
}

// Employer Bookmarks (Employers bookmarking candidates)
model EmployerBookmark {
  id          String   @id @default(uuid())
  employerId  String   @map("employer_id")
  candidateId String   @map("candidate_id")
  notes       String?  // Optional notes about the candidate
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  employer  Employer  @relation(fields: [employerId], references: [id], onDelete: Cascade)
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@unique([employerId, candidateId])
  @@map("employer_bookmarks")
}

// Master Data for Skills
model Skill {
  id          String   @id @default(uuid())
  name        String   @unique
  category    String   // Technical, Soft Skills, etc.
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("skills")
}

// Master Data for Job Categories
model JobCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  ads         Ad[]

  @@map("job_categories")
}

// Education Qualifications Model
model EducationQualification {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ads         Ad[]

  @@map("education_qualifications")
}

model JobRole {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String?  // 'local', 'tech', etc.
  description String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("job_roles")
}

// Email Template Types Enum
enum EmailTemplateType {
  OTP_VERIFICATION
  JOB_APPLIED
  SHORTLISTED
  INTERVIEW_SCHEDULED
  JOB_REJECTED
  WELCOME
  PASSWORD_RESET
  PROFILE_APPROVED
  SUBSCRIPTION_EXPIRED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  TEST
  PASSWORD_RESET_OTP
}

// Subscription Status Enum
enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PAST_DUE
  PENDING_APPROVAL
}

// Subscription Plans
model Plan {
  id                String   @id @default(cuid())
  name              String   // e.g., "Self-Service", "HR-Assist"
  description       String?
  features          String[] // Array of plan features

  // Optional fixed pricing
  priceMonthly      Int?     @map("price_monthly") // monthly subscription
  priceYearly       Int?     @map("price_yearly") // yearly subscription
  pricePerCandidate Int?     @map("price_per_candidate") // optional default per candidate price

  maxJobPosts       Int?     @map("max_job_posts") // optional
  maxShortlists     Int?     @map("max_shortlists") // optional

  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_date")

  // Relations
  subscriptions     Subscription[]

  @@map("plans")
}

// Employer Subscriptions
model Subscription {
  id                   String             @id @default(cuid())
  employerId           String             @map("employer_id")
  planId               String             @map("plan_id")

  status               SubscriptionStatus @default(ACTIVE)
  startDate            DateTime           @default(now()) @map("start_date")
  endDate              DateTime?          @map("end_date")

  // Candidate-based pricing per employer
  pricePerCandidate    Int?               @map("price_per_candidate") // custom per employer
  priceMonthly         Int?               @map("price_monthly") // optional override per employer
  priceYearly          Int?               @map("price_yearly") // optional override per employer

  totalCandidatesHired Int                @default(0) @map("total_candidates_hired")
  totalAmountDue       Int                @default(0) @map("total_amount_due")

  isAutoRenew          Boolean            @default(true) @map("is_auto_renew")
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  // Relations
  employer             Employer           @relation(fields: [employerId], references: [id], onDelete: Cascade)
  plan                 Plan               @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

// Email Templates Model
model EmailTemplate {
  id        String            @id @default(uuid())
  type      EmailTemplateType @unique
  subject   String
  body      String            @db.Text
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")

  @@map("email_templates")
}

// SMS Templates Model
model SmsTemplate {
  id           String   @id @default(uuid())
  templateName String   @unique @map("template_name")
  message      String   @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("sms_templates")
}

// Notification Types Enum
enum NotificationType {
  GENERAL
  WELCOME
  JOB_ALERT
  APPLICATION_UPDATE
  INTERVIEW_SCHEDULED
  JOB_APPROVED
  JOB_REJECTED
  PROFILE_UPDATE
  PROFILE_VIEWED
  JOB_BOOKMARKED
  NEW_APPLICATION
  JOB_VIEW_MILESTONE
  JOB_VIEWED
  JOB_CLOSED
  SYSTEM
  PROMOTIONAL
  TEST
  NEW_EMPLOYER_REGISTERED
  NEW_CANDIDATE_REGISTERED
  NEW_AD_SUBMITTED
  ADMIN_ALERT
  
}

// Notifications Model
model Notification {
  id        String           @id @default(uuid())
  userId    String           @map("user_id")
  title     String
  message   String           @db.Text
  type      NotificationType @default(GENERAL)
  data      Json?            // Additional data payload
  read      Boolean          @default(false)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Notification Templates Model
model NotificationTemplate {
  id          String           @id @default(uuid())
  type        NotificationType @unique
  title       String           // Template title with placeholders like {candidateName}
  body        String           @db.Text // Template body with placeholders
  variables   String[]         // Array of available variables for this template
  isActive    Boolean          @default(true) @map("is_active")
  description String?          // Description of when this template is used
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  @@map("notification_templates")
}

// Daily Notification Tracking Model
model DailyNotificationTracker {
  id               String           @id @default(uuid())
  userId           String           @map("user_id")
  notificationType NotificationType @map("notification_type")
  date             DateTime         @db.Date // Track notifications per day
  count            Int              @default(1)
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationType, date])
  @@map("daily_notification_trackers")
}

// Job View Tracking Model
model JobView {
  id        String   @id @default(uuid())
  adId      String   @map("ad_id")
  userId    String?  @map("user_id") // Optional for anonymous views
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  viewedAt  DateTime @default(now()) @map("viewed_at")

  // Relations
  ad   Ad    @relation(fields: [adId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("job_views")
}

// Profile View Tracking Model
model ProfileView {
  id          String   @id @default(uuid())
  candidateId String   @map("candidate_id")
  employerId  String   @map("employer_id")
  viewedAt    DateTime @default(now()) @map("viewed_at")

  // Relations
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  employer  Employer  @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@map("profile_views")
}

// Job View Milestone Tracking Model
model JobViewMilestone {
  id        String   @id @default(uuid())
  adId      String   @map("ad_id")
  milestone Int      // 10, 25, 50, 100, etc.
  achieved  Boolean  @default(false)
  achievedAt DateTime? @map("achieved_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  ad Ad @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@unique([adId, milestone])
  @@map("job_view_milestones")
}

// User Notification Preferences Model
model UserNotificationPreference {
  id                   String   @id @default(uuid())
  userId               String   @unique @map("user_id")
  emailNotifications   Boolean  @default(true) @map("email_notifications")
  smsNotifications     Boolean  @default(false) @map("sms_notifications")
  pushNotifications    Boolean  @default(true) @map("push_notifications")
  jobAlerts            Boolean  @default(true) @map("job_alerts")
  applicationUpdates   Boolean  @default(true) @map("application_updates")
  interviewReminders   Boolean  @default(true) @map("interview_reminders")
  profileUpdates       Boolean  @default(false) @map("profile_updates")
  systemNotifications  Boolean  @default(true) @map("system_notifications")
  promotionalOffers    Boolean  @default(false) @map("promotional_offers")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notification_preferences")
}